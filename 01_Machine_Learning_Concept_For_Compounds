{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9918889,"sourceType":"datasetVersion","datasetId":5958257}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Instalasi Packages**","metadata":{}},{"cell_type":"code","source":"# Instalasi machine Learning Package\nimport sys\nimport time\nimport contextlib\nwith open('install_ML.log', 'a') as inpt:\n    with contextlib.redirect_stdout(inpt):\n\n        # -- Start installation --\n        start = time.time()\n        !pip install cairosvg\n        !pip install padelpy\n        !pip install gdown\n        !pip install luwiji\n        !pip install jcopml\n        !pip install chembl_webresource_client\n\n        import numpy as np\n        import pandas as pd\n        \n        from luwiji.knn import illustration, demo\n        \n        import matplotlib.pyplot as plt\n        import seaborn as sns\n        import os\n        import copy\n        from padelpy import padeldescriptor\n        import pandas as pd\n        import numpy as np\n        \n        from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n        from chembl_webresource_client.new_client import new_client\n        end = time.time()\n        # -- End installation --\nprint(f'+ Time elapsed: ' + time.strftime('%Mm %Ss', time.gmtime(end - start)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T02:43:00.991334Z","iopub.execute_input":"2024-11-19T02:43:00.992271Z","iopub.status.idle":"2024-11-19T02:44:20.266057Z","shell.execute_reply.started":"2024-11-19T02:43:00.992206Z","shell.execute_reply":"2024-11-19T02:44:20.264547Z"}},"outputs":[{"name":"stdout","text":"+ Time elapsed: 01m 19s\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# **Data Prep**","metadata":{}},{"cell_type":"markdown","source":"## Data Enginering","metadata":{}},{"cell_type":"markdown","source":"**dataset 1 (lipinsky)**","metadata":{}},{"cell_type":"code","source":"df_lipinsky = pd.read_csv('/kaggle/input/docking-md/Marine_Drug_Discovery/SHP2_Enzymes/MACHINE_LEARNING/SHP2_Enzymes_04_PBMC_bioactivity_data_final.csv')\ndf_lipinsky","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T02:47:40.510194Z","iopub.execute_input":"2024-11-19T02:47:40.510574Z","iopub.status.idle":"2024-11-19T02:47:40.550096Z","shell.execute_reply.started":"2024-11-19T02:47:40.510541Z","shell.execute_reply":"2024-11-19T02:47:40.548705Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"     molecule_chembl_id                                   canonical_smiles  \\\n0           CHEMBL88475      CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC   \n1           CHEMBL89890        COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC   \n2          CHEMBL419135       CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC   \n3             CHEMBL468                O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1   \n4           CHEMBL88935     COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O   \n...                 ...                                                ...   \n2760      CHEMBL4638643  COC[C@@](O)([C@@H](Nc1cc(F)cc2[nH]c(=O)ccc12)c...   \n2761      CHEMBL4639128  COCc1nc2cnc3cc(-c4c(C)noc4C)c(OC[C@H]4CCNC4)cc...   \n2762      CHEMBL4638144  COc1ccc2c(c1)C(c1ccc(Cl)cc1)=N[C@@H](NC(=O)OCc...   \n2763      CHEMBL4641965  CCCC#Cc1cc([C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)n...   \n2764      CHEMBL4640462  Nc1ncnn2c([C@@H]3O[C@H](CO)[C@@H](O)[C@H]3O)cc...   \n\n      standard_value         class       MW     LogP  NumHDonors  \\\n0             700.00        active  383.400  2.99430         0.0   \n1           13000.00      inactive  354.362  1.91650         1.0   \n2            2700.00  intermediate  368.389  2.30660         1.0   \n3          200000.00      inactive  258.233  0.08780         1.0   \n4            2900.00  intermediate  369.373  2.60420         0.0   \n...              ...           ...      ...      ...         ...   \n2760            0.92        active  492.828  4.56130         3.0   \n2761           63.10        active  511.626  5.60034         1.0   \n2762          316.23        active  487.947  5.01372         1.0   \n2763           50.00        active  332.360 -0.38290         4.0   \n2764          100.00        active  330.344 -0.77300         4.0   \n\n      NumHAcceptors     pIC50  \n0               6.0  6.154902  \n1               5.0  4.886057  \n2               5.0  5.568636  \n3               4.0  3.698970  \n4               6.0  5.537602  \n...             ...       ...  \n2760            5.0  9.036212  \n2761            8.0  7.199971  \n2762            7.0  6.499997  \n2763            8.0  7.301030  \n2764            8.0  7.000000  \n\n[2765 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>standard_value</th>\n      <th>class</th>\n      <th>MW</th>\n      <th>LogP</th>\n      <th>NumHDonors</th>\n      <th>NumHAcceptors</th>\n      <th>pIC50</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL88475</td>\n      <td>CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>700.00</td>\n      <td>active</td>\n      <td>383.400</td>\n      <td>2.99430</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>6.154902</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL89890</td>\n      <td>COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC</td>\n      <td>13000.00</td>\n      <td>inactive</td>\n      <td>354.362</td>\n      <td>1.91650</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>4.886057</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL419135</td>\n      <td>CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>2700.00</td>\n      <td>intermediate</td>\n      <td>368.389</td>\n      <td>2.30660</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>5.568636</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL468</td>\n      <td>O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1</td>\n      <td>200000.00</td>\n      <td>inactive</td>\n      <td>258.233</td>\n      <td>0.08780</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>3.698970</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL88935</td>\n      <td>COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O</td>\n      <td>2900.00</td>\n      <td>intermediate</td>\n      <td>369.373</td>\n      <td>2.60420</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>5.537602</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2760</th>\n      <td>CHEMBL4638643</td>\n      <td>COC[C@@](O)([C@@H](Nc1cc(F)cc2[nH]c(=O)ccc12)c...</td>\n      <td>0.92</td>\n      <td>active</td>\n      <td>492.828</td>\n      <td>4.56130</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>9.036212</td>\n    </tr>\n    <tr>\n      <th>2761</th>\n      <td>CHEMBL4639128</td>\n      <td>COCc1nc2cnc3cc(-c4c(C)noc4C)c(OC[C@H]4CCNC4)cc...</td>\n      <td>63.10</td>\n      <td>active</td>\n      <td>511.626</td>\n      <td>5.60034</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>7.199971</td>\n    </tr>\n    <tr>\n      <th>2762</th>\n      <td>CHEMBL4638144</td>\n      <td>COc1ccc2c(c1)C(c1ccc(Cl)cc1)=N[C@@H](NC(=O)OCc...</td>\n      <td>316.23</td>\n      <td>active</td>\n      <td>487.947</td>\n      <td>5.01372</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>6.499997</td>\n    </tr>\n    <tr>\n      <th>2763</th>\n      <td>CHEMBL4641965</td>\n      <td>CCCC#Cc1cc([C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)n...</td>\n      <td>50.00</td>\n      <td>active</td>\n      <td>332.360</td>\n      <td>-0.38290</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>7.301030</td>\n    </tr>\n    <tr>\n      <th>2764</th>\n      <td>CHEMBL4640462</td>\n      <td>Nc1ncnn2c([C@@H]3O[C@H](CO)[C@@H](O)[C@H]3O)cc...</td>\n      <td>100.00</td>\n      <td>active</td>\n      <td>330.344</td>\n      <td>-0.77300</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>7.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>2765 rows Ã— 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"**Melakukan transformasi class menjadi numeric ordinal**","metadata":{}},{"cell_type":"code","source":"# Mapping kelas kategori (class) ke nilai numerik (0,1,2)\nmapping = {'active': 0, 'inactive': 1, 'intermediate': 2}\ndf_lipinsky['class_numeric'] = df_lipinsky['class'].map(mapping)\n\ndf_lipinsky","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:05:18.217225Z","iopub.execute_input":"2024-11-19T03:05:18.217709Z","iopub.status.idle":"2024-11-19T03:05:18.239074Z","shell.execute_reply.started":"2024-11-19T03:05:18.217672Z","shell.execute_reply":"2024-11-19T03:05:18.237851Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"     molecule_chembl_id                                   canonical_smiles  \\\n0           CHEMBL88475      CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC   \n1           CHEMBL89890        COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC   \n2          CHEMBL419135       CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC   \n3             CHEMBL468                O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1   \n4           CHEMBL88935     COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O   \n...                 ...                                                ...   \n2760      CHEMBL4638643  COC[C@@](O)([C@@H](Nc1cc(F)cc2[nH]c(=O)ccc12)c...   \n2761      CHEMBL4639128  COCc1nc2cnc3cc(-c4c(C)noc4C)c(OC[C@H]4CCNC4)cc...   \n2762      CHEMBL4638144  COc1ccc2c(c1)C(c1ccc(Cl)cc1)=N[C@@H](NC(=O)OCc...   \n2763      CHEMBL4641965  CCCC#Cc1cc([C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)n...   \n2764      CHEMBL4640462  Nc1ncnn2c([C@@H]3O[C@H](CO)[C@@H](O)[C@H]3O)cc...   \n\n      standard_value         class       MW     LogP  NumHDonors  \\\n0             700.00        active  383.400  2.99430         0.0   \n1           13000.00      inactive  354.362  1.91650         1.0   \n2            2700.00  intermediate  368.389  2.30660         1.0   \n3          200000.00      inactive  258.233  0.08780         1.0   \n4            2900.00  intermediate  369.373  2.60420         0.0   \n...              ...           ...      ...      ...         ...   \n2760            0.92        active  492.828  4.56130         3.0   \n2761           63.10        active  511.626  5.60034         1.0   \n2762          316.23        active  487.947  5.01372         1.0   \n2763           50.00        active  332.360 -0.38290         4.0   \n2764          100.00        active  330.344 -0.77300         4.0   \n\n      NumHAcceptors     pIC50  class_numeric  \n0               6.0  6.154902              0  \n1               5.0  4.886057              1  \n2               5.0  5.568636              2  \n3               4.0  3.698970              1  \n4               6.0  5.537602              2  \n...             ...       ...            ...  \n2760            5.0  9.036212              0  \n2761            8.0  7.199971              0  \n2762            7.0  6.499997              0  \n2763            8.0  7.301030              0  \n2764            8.0  7.000000              0  \n\n[2765 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>standard_value</th>\n      <th>class</th>\n      <th>MW</th>\n      <th>LogP</th>\n      <th>NumHDonors</th>\n      <th>NumHAcceptors</th>\n      <th>pIC50</th>\n      <th>class_numeric</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL88475</td>\n      <td>CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>700.00</td>\n      <td>active</td>\n      <td>383.400</td>\n      <td>2.99430</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>6.154902</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL89890</td>\n      <td>COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC</td>\n      <td>13000.00</td>\n      <td>inactive</td>\n      <td>354.362</td>\n      <td>1.91650</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>4.886057</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL419135</td>\n      <td>CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>2700.00</td>\n      <td>intermediate</td>\n      <td>368.389</td>\n      <td>2.30660</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>5.568636</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL468</td>\n      <td>O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1</td>\n      <td>200000.00</td>\n      <td>inactive</td>\n      <td>258.233</td>\n      <td>0.08780</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>3.698970</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL88935</td>\n      <td>COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O</td>\n      <td>2900.00</td>\n      <td>intermediate</td>\n      <td>369.373</td>\n      <td>2.60420</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>5.537602</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2760</th>\n      <td>CHEMBL4638643</td>\n      <td>COC[C@@](O)([C@@H](Nc1cc(F)cc2[nH]c(=O)ccc12)c...</td>\n      <td>0.92</td>\n      <td>active</td>\n      <td>492.828</td>\n      <td>4.56130</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>9.036212</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2761</th>\n      <td>CHEMBL4639128</td>\n      <td>COCc1nc2cnc3cc(-c4c(C)noc4C)c(OC[C@H]4CCNC4)cc...</td>\n      <td>63.10</td>\n      <td>active</td>\n      <td>511.626</td>\n      <td>5.60034</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>7.199971</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2762</th>\n      <td>CHEMBL4638144</td>\n      <td>COc1ccc2c(c1)C(c1ccc(Cl)cc1)=N[C@@H](NC(=O)OCc...</td>\n      <td>316.23</td>\n      <td>active</td>\n      <td>487.947</td>\n      <td>5.01372</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>6.499997</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2763</th>\n      <td>CHEMBL4641965</td>\n      <td>CCCC#Cc1cc([C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)n...</td>\n      <td>50.00</td>\n      <td>active</td>\n      <td>332.360</td>\n      <td>-0.38290</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>7.301030</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2764</th>\n      <td>CHEMBL4640462</td>\n      <td>Nc1ncnn2c([C@@H]3O[C@H](CO)[C@@H](O)[C@H]3O)cc...</td>\n      <td>100.00</td>\n      <td>active</td>\n      <td>330.344</td>\n      <td>-0.77300</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>7.000000</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2765 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"**dataset 2 (finger print)**","metadata":{}},{"cell_type":"code","source":"df_fp = pd.read_csv('/kaggle/input/docking-md/Marine_Drug_Discovery/SHP2_Enzymes/MACHINE_LEARNING/SHP2_Enzymes_06_PBMC_bioactivity_data_final_3class_fp.csv')\ndf_fp = df_fp.drop(columns='pIC50')\ndf_fp","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T02:53:01.279604Z","iopub.execute_input":"2024-11-19T02:53:01.280592Z","iopub.status.idle":"2024-11-19T02:53:01.371652Z","shell.execute_reply.started":"2024-11-19T02:53:01.280542Z","shell.execute_reply":"2024-11-19T02:53:01.370300Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"      SubFP1  SubFP2  SubFP3  SubFP4  SubFP5  SubFP6  SubFP7  SubFP8  SubFP9  \\\n0          1       1       0       0       0       0       0       0       0   \n1          0       1       0       0       0       0       0       0       0   \n2          1       1       0       0       0       0       0       0       0   \n3          0       1       0       0       0       0       0       0       0   \n4          0       1       0       0       0       0       0       0       0   \n...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n2760       0       0       0       0       1       0       0       0       1   \n2761       1       1       1       0       0       0       0       0       0   \n2762       1       0       0       0       0       0       0       0       0   \n2763       1       1       0       0       0       1       0       0       0   \n2764       0       1       1       0       0       1       0       0       0   \n\n      SubFP10  ...  SubFP298  SubFP299  SubFP300  SubFP301  SubFP302  \\\n0           0  ...         0         0         1         1         1   \n1           0  ...         0         0         1         1         1   \n2           0  ...         0         0         1         1         1   \n3           0  ...         0         0         1         1         1   \n4           0  ...         0         0         1         1         1   \n...       ...  ...       ...       ...       ...       ...       ...   \n2760        0  ...         0         0         1         1         1   \n2761        0  ...         0         0         1         1         1   \n2762        0  ...         0         0         1         1         1   \n2763        0  ...         0         0         1         1         1   \n2764        0  ...         0         0         1         1         1   \n\n      SubFP303  SubFP304  SubFP305  SubFP306  SubFP307  \n0            0         0         0         0         1  \n1            0         0         0         0         1  \n2            0         0         0         0         1  \n3            0         0         0         0         1  \n4            0         0         0         0         1  \n...        ...       ...       ...       ...       ...  \n2760         1         0         0         0         1  \n2761         0         0         0         0         1  \n2762         0         0         0         0         1  \n2763         0         0         0         0         1  \n2764         0         0         0         0         1  \n\n[2765 rows x 307 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SubFP1</th>\n      <th>SubFP2</th>\n      <th>SubFP3</th>\n      <th>SubFP4</th>\n      <th>SubFP5</th>\n      <th>SubFP6</th>\n      <th>SubFP7</th>\n      <th>SubFP8</th>\n      <th>SubFP9</th>\n      <th>SubFP10</th>\n      <th>...</th>\n      <th>SubFP298</th>\n      <th>SubFP299</th>\n      <th>SubFP300</th>\n      <th>SubFP301</th>\n      <th>SubFP302</th>\n      <th>SubFP303</th>\n      <th>SubFP304</th>\n      <th>SubFP305</th>\n      <th>SubFP306</th>\n      <th>SubFP307</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2760</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2761</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2762</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2763</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2764</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2765 rows Ã— 307 columns</p>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"**dataset 3 (combined)**","metadata":{}},{"cell_type":"code","source":"df_combined = pd.concat([df_lipinsky,df_fp], axis=1)\ndf_combined.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:05:53.620288Z","iopub.execute_input":"2024-11-19T03:05:53.620658Z","iopub.status.idle":"2024-11-19T03:05:53.644515Z","shell.execute_reply.started":"2024-11-19T03:05:53.620627Z","shell.execute_reply":"2024-11-19T03:05:53.643327Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"  molecule_chembl_id                                canonical_smiles  \\\n0        CHEMBL88475   CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC   \n1        CHEMBL89890     COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC   \n2       CHEMBL419135    CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC   \n3          CHEMBL468             O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1   \n4        CHEMBL88935  COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O   \n\n   standard_value         class       MW    LogP  NumHDonors  NumHAcceptors  \\\n0           700.0        active  383.400  2.9943         0.0            6.0   \n1         13000.0      inactive  354.362  1.9165         1.0            5.0   \n2          2700.0  intermediate  368.389  2.3066         1.0            5.0   \n3        200000.0      inactive  258.233  0.0878         1.0            4.0   \n4          2900.0  intermediate  369.373  2.6042         0.0            6.0   \n\n      pIC50  class_numeric  ...  SubFP298  SubFP299  SubFP300  SubFP301  \\\n0  6.154902              0  ...         0         0         1         1   \n1  4.886057              1  ...         0         0         1         1   \n2  5.568636              2  ...         0         0         1         1   \n3  3.698970              1  ...         0         0         1         1   \n4  5.537602              2  ...         0         0         1         1   \n\n   SubFP302  SubFP303  SubFP304  SubFP305  SubFP306  SubFP307  \n0         1         0         0         0         0         1  \n1         1         0         0         0         0         1  \n2         1         0         0         0         0         1  \n3         1         0         0         0         0         1  \n4         1         0         0         0         0         1  \n\n[5 rows x 317 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>standard_value</th>\n      <th>class</th>\n      <th>MW</th>\n      <th>LogP</th>\n      <th>NumHDonors</th>\n      <th>NumHAcceptors</th>\n      <th>pIC50</th>\n      <th>class_numeric</th>\n      <th>...</th>\n      <th>SubFP298</th>\n      <th>SubFP299</th>\n      <th>SubFP300</th>\n      <th>SubFP301</th>\n      <th>SubFP302</th>\n      <th>SubFP303</th>\n      <th>SubFP304</th>\n      <th>SubFP305</th>\n      <th>SubFP306</th>\n      <th>SubFP307</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL88475</td>\n      <td>CCOc1cc(C(CC(=O)OC)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>700.0</td>\n      <td>active</td>\n      <td>383.400</td>\n      <td>2.9943</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>6.154902</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL89890</td>\n      <td>COc1ccc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)cc1OC</td>\n      <td>13000.0</td>\n      <td>inactive</td>\n      <td>354.362</td>\n      <td>1.9165</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>4.886057</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL419135</td>\n      <td>CCOc1cc(C(CC(N)=O)N2C(=O)c3ccccc3C2=O)ccc1OC</td>\n      <td>2700.0</td>\n      <td>intermediate</td>\n      <td>368.389</td>\n      <td>2.3066</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>5.568636</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL468</td>\n      <td>O=C1CCC(N2C(=O)c3ccccc3C2=O)C(=O)N1</td>\n      <td>200000.0</td>\n      <td>inactive</td>\n      <td>258.233</td>\n      <td>0.0878</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>3.698970</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL88935</td>\n      <td>COC(=O)CC(c1ccc(OC)c(OC)c1)N1C(=O)c2ccccc2C1=O</td>\n      <td>2900.0</td>\n      <td>intermediate</td>\n      <td>369.373</td>\n      <td>2.6042</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>5.537602</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 317 columns</p>\n</div>"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"plt.figure(figsize=(10,10))\nsns.heatmap(df_combined.isna(), cmap=\"Blues\", cbar=False);","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:06:00.359499Z","iopub.execute_input":"2024-11-19T03:06:00.359913Z","iopub.status.idle":"2024-11-19T03:06:02.444219Z","shell.execute_reply.started":"2024-11-19T03:06:00.359879Z","shell.execute_reply":"2024-11-19T03:06:02.442674Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"## Data Preparasi","metadata":{}},{"cell_type":"code","source":"df = df_combined.drop(columns=[\"molecule_chembl_id\",\"canonical_smiles\",\"standard_value\",\"class\",\"pIC50\"])\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:17:10.635387Z","iopub.execute_input":"2024-11-19T03:17:10.635802Z","iopub.status.idle":"2024-11-19T03:17:10.661312Z","shell.execute_reply.started":"2024-11-19T03:17:10.635767Z","shell.execute_reply":"2024-11-19T03:17:10.660169Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"           MW     LogP  NumHDonors  NumHAcceptors  class_numeric  SubFP1  \\\n0     383.400  2.99430         0.0            6.0              0       1   \n1     354.362  1.91650         1.0            5.0              1       0   \n2     368.389  2.30660         1.0            5.0              2       1   \n3     258.233  0.08780         1.0            4.0              1       0   \n4     369.373  2.60420         0.0            6.0              2       0   \n...       ...      ...         ...            ...            ...     ...   \n2760  492.828  4.56130         3.0            5.0              0       0   \n2761  511.626  5.60034         1.0            8.0              0       1   \n2762  487.947  5.01372         1.0            7.0              0       1   \n2763  332.360 -0.38290         4.0            8.0              0       1   \n2764  330.344 -0.77300         4.0            8.0              0       0   \n\n      SubFP2  SubFP3  SubFP4  SubFP5  ...  SubFP298  SubFP299  SubFP300  \\\n0          1       0       0       0  ...         0         0         1   \n1          1       0       0       0  ...         0         0         1   \n2          1       0       0       0  ...         0         0         1   \n3          1       0       0       0  ...         0         0         1   \n4          1       0       0       0  ...         0         0         1   \n...      ...     ...     ...     ...  ...       ...       ...       ...   \n2760       0       0       0       1  ...         0         0         1   \n2761       1       1       0       0  ...         0         0         1   \n2762       0       0       0       0  ...         0         0         1   \n2763       1       0       0       0  ...         0         0         1   \n2764       1       1       0       0  ...         0         0         1   \n\n      SubFP301  SubFP302  SubFP303  SubFP304  SubFP305  SubFP306  SubFP307  \n0            1         1         0         0         0         0         1  \n1            1         1         0         0         0         0         1  \n2            1         1         0         0         0         0         1  \n3            1         1         0         0         0         0         1  \n4            1         1         0         0         0         0         1  \n...        ...       ...       ...       ...       ...       ...       ...  \n2760         1         1         1         0         0         0         1  \n2761         1         1         0         0         0         0         1  \n2762         1         1         0         0         0         0         1  \n2763         1         1         0         0         0         0         1  \n2764         1         1         0         0         0         0         1  \n\n[2765 rows x 312 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MW</th>\n      <th>LogP</th>\n      <th>NumHDonors</th>\n      <th>NumHAcceptors</th>\n      <th>class_numeric</th>\n      <th>SubFP1</th>\n      <th>SubFP2</th>\n      <th>SubFP3</th>\n      <th>SubFP4</th>\n      <th>SubFP5</th>\n      <th>...</th>\n      <th>SubFP298</th>\n      <th>SubFP299</th>\n      <th>SubFP300</th>\n      <th>SubFP301</th>\n      <th>SubFP302</th>\n      <th>SubFP303</th>\n      <th>SubFP304</th>\n      <th>SubFP305</th>\n      <th>SubFP306</th>\n      <th>SubFP307</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>383.400</td>\n      <td>2.99430</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>354.362</td>\n      <td>1.91650</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>368.389</td>\n      <td>2.30660</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>258.233</td>\n      <td>0.08780</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>369.373</td>\n      <td>2.60420</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2760</th>\n      <td>492.828</td>\n      <td>4.56130</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2761</th>\n      <td>511.626</td>\n      <td>5.60034</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2762</th>\n      <td>487.947</td>\n      <td>5.01372</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2763</th>\n      <td>332.360</td>\n      <td>-0.38290</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2764</th>\n      <td>330.344</td>\n      <td>-0.77300</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2765 rows Ã— 312 columns</p>\n</div>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"X = df.drop(columns='class_numeric')\ny = df.class_numeric","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:17:29.120810Z","iopub.execute_input":"2024-11-19T03:17:29.121226Z","iopub.status.idle":"2024-11-19T03:17:29.128670Z","shell.execute_reply.started":"2024-11-19T03:17:29.121192Z","shell.execute_reply":"2024-11-19T03:17:29.127322Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"X.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:17:32.172873Z","iopub.execute_input":"2024-11-19T03:17:32.173289Z","iopub.status.idle":"2024-11-19T03:17:32.191652Z","shell.execute_reply.started":"2024-11-19T03:17:32.173240Z","shell.execute_reply":"2024-11-19T03:17:32.190618Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"        MW    LogP  NumHDonors  NumHAcceptors  SubFP1  SubFP2  SubFP3  SubFP4  \\\n0  383.400  2.9943         0.0            6.0       1       1       0       0   \n1  354.362  1.9165         1.0            5.0       0       1       0       0   \n2  368.389  2.3066         1.0            5.0       1       1       0       0   \n3  258.233  0.0878         1.0            4.0       0       1       0       0   \n4  369.373  2.6042         0.0            6.0       0       1       0       0   \n\n   SubFP5  SubFP6  ...  SubFP298  SubFP299  SubFP300  SubFP301  SubFP302  \\\n0       0       0  ...         0         0         1         1         1   \n1       0       0  ...         0         0         1         1         1   \n2       0       0  ...         0         0         1         1         1   \n3       0       0  ...         0         0         1         1         1   \n4       0       0  ...         0         0         1         1         1   \n\n   SubFP303  SubFP304  SubFP305  SubFP306  SubFP307  \n0         0         0         0         0         1  \n1         0         0         0         0         1  \n2         0         0         0         0         1  \n3         0         0         0         0         1  \n4         0         0         0         0         1  \n\n[5 rows x 311 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MW</th>\n      <th>LogP</th>\n      <th>NumHDonors</th>\n      <th>NumHAcceptors</th>\n      <th>SubFP1</th>\n      <th>SubFP2</th>\n      <th>SubFP3</th>\n      <th>SubFP4</th>\n      <th>SubFP5</th>\n      <th>SubFP6</th>\n      <th>...</th>\n      <th>SubFP298</th>\n      <th>SubFP299</th>\n      <th>SubFP300</th>\n      <th>SubFP301</th>\n      <th>SubFP302</th>\n      <th>SubFP303</th>\n      <th>SubFP304</th>\n      <th>SubFP305</th>\n      <th>SubFP306</th>\n      <th>SubFP307</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>383.400</td>\n      <td>2.9943</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>354.362</td>\n      <td>1.9165</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>368.389</td>\n      <td>2.3066</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>258.233</td>\n      <td>0.0878</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>369.373</td>\n      <td>2.6042</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 311 columns</p>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"y.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:17:37.873728Z","iopub.execute_input":"2024-11-19T03:17:37.874132Z","iopub.status.idle":"2024-11-19T03:17:37.884070Z","shell.execute_reply.started":"2024-11-19T03:17:37.874096Z","shell.execute_reply":"2024-11-19T03:17:37.882792Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"0    0\n1    1\n2    2\n3    1\n4    2\nName: class_numeric, dtype: int64"},"metadata":{}}],"execution_count":29},{"cell_type":"markdown","source":"# **Menggunakan KNN**","metadata":{}},{"cell_type":"markdown","source":"## 1_Based Model","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier # Memilih classifier karena berdasarkan target kita (survived) yang juga merupakan kategori\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:18:04.566925Z","iopub.execute_input":"2024-11-19T03:18:04.567339Z","iopub.status.idle":"2024-11-19T03:18:04.589988Z","shell.execute_reply.started":"2024-11-19T03:18:04.567300Z","shell.execute_reply":"2024-11-19T03:18:04.588730Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier(n_neighbors=1)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"knn.score(X,y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T03:18:18.401013Z","iopub.execute_input":"2024-11-19T03:18:18.401430Z","iopub.status.idle":"2024-11-19T03:18:18.802100Z","shell.execute_reply.started":"2024-11-19T03:18:18.401398Z","shell.execute_reply":"2024-11-19T03:18:18.801093Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"0.979746835443038"},"metadata":{}}],"execution_count":31},{"cell_type":"markdown","source":"Score ini hanya nilai belajarnya saja tidak memiliki split data train atupun test dan bahkan validasi","metadata":{}},{"cell_type":"markdown","source":"## 2_Menggunakan Splitting","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\n# import data dan drop kolom\n#df = pd.read_csv(\"/kaggle/input/docking-md/Marine_Drug_Discovery/SHP2_Enzymes/MACHINE_LEARNING/SHP2_Enzymes_06_PBMC_bioactivity_data_final_3class_fp.csv\")\n#df.drop(columns=[\"Name\", \"Ticket\", \"Age\", \"Cabin\"], inplace=True)\n\n# dataset splitting\nX = df.drop(columns='class_numeric')\ny = df.class_numeric\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n# preprocessor\nnumerical_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy='mean')),\n    (\"scaler\", MinMaxScaler())\n])\ncategorical_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy='most_frequent')),\n    (\"scaler\", OneHotEncoder())\n])\n\npreprocessor = ColumnTransformer([\n    #(\"numeric\", numerical_pipeline, [\"SibSp\", \"Parch\", \"Fare\"]),\n    #(\"categoric\", categorical_pipeline,[\"Pclass\", \"Sex\", \"Embarked\"])\n])\n\n# pipeline\npipeline = Pipeline([\n    (\"prep\", preprocessor),\n    (\"algo\", KNeighborsClassifier())\n])\n\n# parameter tuning\nparameter = {\n    \"algo__n_neighbors\": np.arange(1,51,2),\n    \"algo__weights\":['uniform', 'distance'],\n    \"algo__p\": [1, 2]\n}\n\nmodel = GridSearchCV(pipeline, param_grid=parameter, cv=3, n_jobs=-1, verbose=1)\nmodel.fit(X_train, y_train)\n\n# evaluation\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-19T02:38:37.295317Z","iopub.execute_input":"2024-11-19T02:38:37.295751Z","iopub.status.idle":"2024-11-19T02:38:41.357501Z","shell.execute_reply.started":"2024-11-19T02:38:37.295711Z","shell.execute_reply":"2024-11-19T02:38:41.355606Z"}},"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 100 candidates, totalling 300 fits\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 50\u001b[0m\n\u001b[1;32m     43\u001b[0m parameter \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m     44\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malgo__n_neighbors\u001b[39m\u001b[38;5;124m\"\u001b[39m: np\u001b[38;5;241m.\u001b[39marange(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m51\u001b[39m,\u001b[38;5;241m2\u001b[39m),\n\u001b[1;32m     45\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malgo__weights\u001b[39m\u001b[38;5;124m\"\u001b[39m:[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124muniform\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdistance\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m     46\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malgo__p\u001b[39m\u001b[38;5;124m\"\u001b[39m: [\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m]\n\u001b[1;32m     47\u001b[0m }\n\u001b[1;32m     49\u001b[0m model \u001b[38;5;241m=\u001b[39m GridSearchCV(pipeline, param_grid\u001b[38;5;241m=\u001b[39mparameter, cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m---> 50\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;66;03m# evaluation\u001b[39;00m\n\u001b[1;32m     53\u001b[0m \u001b[38;5;28mprint\u001b[39m(model\u001b[38;5;241m.\u001b[39mbest_params_)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:851\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    844\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m!=\u001b[39m n_candidates \u001b[38;5;241m*\u001b[39m n_splits:\n\u001b[1;32m    845\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    846\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcv.split and cv.get_n_splits returned \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    847\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124minconsistent results. Expected \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    848\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msplits, got \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(n_splits, \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m n_candidates)\n\u001b[1;32m    849\u001b[0m     )\n\u001b[0;32m--> 851\u001b[0m \u001b[43m_warn_or_raise_about_fit_failures\u001b[49m\u001b[43m(\u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    853\u001b[0m \u001b[38;5;66;03m# For callable self.scoring, the return type is only know after\u001b[39;00m\n\u001b[1;32m    854\u001b[0m \u001b[38;5;66;03m# calling. If the return type is a dictionary, the error scores\u001b[39;00m\n\u001b[1;32m    855\u001b[0m \u001b[38;5;66;03m# can now be inserted with the correct key. The type checking\u001b[39;00m\n\u001b[1;32m    856\u001b[0m \u001b[38;5;66;03m# of out will be done in `_insert_error_scores`.\u001b[39;00m\n\u001b[1;32m    857\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mscoring):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:367\u001b[0m, in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m num_failed_fits \u001b[38;5;241m==\u001b[39m num_fits:\n\u001b[1;32m    361\u001b[0m     all_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    362\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mAll the \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    363\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIt is very likely that your model is misconfigured.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    364\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou can try to debug the error by setting error_score=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    365\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    366\u001b[0m     )\n\u001b[0;32m--> 367\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(all_fits_failed_message)\n\u001b[1;32m    369\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    370\u001b[0m     some_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    371\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mnum_failed_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed out of a total of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    372\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe score on these train-test partitions for these parameters\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    376\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    377\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: \nAll the 300 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n100 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py\", line 405, in fit\n    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_classification.py\", line 215, in fit\n    return self._fit(X, y)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_base.py\", line 454, in _fit\n    X, y = self._validate_data(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 940, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1474, 0)) while a minimum of 1 is required by KNeighborsClassifier.\n\n--------------------------------------------------------------------------------\n200 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py\", line 405, in fit\n    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_classification.py\", line 215, in fit\n    return self._fit(X, y)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_base.py\", line 454, in _fit\n    X, y = self._validate_data(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 940, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1475, 0)) while a minimum of 1 is required by KNeighborsClassifier.\n"],"ename":"ValueError","evalue":"\nAll the 300 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n100 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py\", line 405, in fit\n    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_classification.py\", line 215, in fit\n    return self._fit(X, y)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_base.py\", line 454, in _fit\n    X, y = self._validate_data(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 940, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1474, 0)) while a minimum of 1 is required by KNeighborsClassifier.\n\n--------------------------------------------------------------------------------\n200 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py\", line 405, in fit\n    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_classification.py\", line 215, in fit\n    return self._fit(X, y)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/neighbors/_base.py\", line 454, in _fit\n    X, y = self._validate_data(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 940, in check_array\n    raise ValueError(\nValueError: Found array with 0 feature(s) (shape=(1475, 0)) while a minimum of 1 is required by KNeighborsClassifier.\n","output_type":"error"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}